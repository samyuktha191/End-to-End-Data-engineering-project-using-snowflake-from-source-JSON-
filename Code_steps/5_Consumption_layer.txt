use role sysadmin;
use warehouse compute_wh;
use schema CRICKET.CONSUMPTION;


--Date Dimension
create or replace table date_dim (
    date_id int primary key autoincrement,
    full_dt date,
    day int,
    month int,
    year int,
    quarter int,
    dayofweek int,
    dayofmonth int,
    dayofyear int,
    dayofweekname varchar(3), -- to store day names (e.g., "Mon")
    isweekend boolean -- to indicate if it's a weekend (True/False Sat/Sun both falls under weekend)
);

--Referee Dimension
create or replace table referee_dim (
    referee_id int primary key autoincrement,
    referee_name text not null,
    referee_type text not null
);


--Team & Player Dimension
create or replace table team_dim (
    team_id int primary key autoincrement,
    team_name text not null
);

-- player..
create or replace table player_dim (
    player_id int primary key autoincrement,
    team_id int not null,
    player_name text not null
);


alter table cricket.consumption.player_dim
add constraint fk_team_player_id
foreign key (team_id)
references cricket.consumption.team_dim (team_id);

--Venue Dimension
create or replace table venue_dim (
    venue_id int primary key autoincrement,
    venue_name text not null,
    city text not null,
    state text,
    country text,
    continent text,
    end_Names text,
    capacity number,
    pitch text,
    flood_light boolean,
    established_dt date,
    playing_area text,
    other_sports text,
    curator text,
    lattitude number(10,6),
    longitude number(10,6)
);

--Match Dimension
create or replace table match_type_dim (
    match_type_id int primary key autoincrement,
    match_type text not null
);
--Match Fact Table DDL Scripts
CREATE or replace TABLE match_fact (
    match_id INT PRIMARY KEY,
    date_id INT NOT NULL,
    referee_id INT NOT NULL,
    first_team_id INT NOT NULL,
    second_team_id INT NOT NULL,
    match_type_id INT NOT NULL,
    venue_id INT NOT NULL,
    total_overs number(4),
    balls_per_overs number(2),

    overs_played_by_team_a number(3),
    balls_played_by_team_a number(4),
    extra_balls_played_by_team_a number(4),
    extra_runs_scored_by_team_a number(4),
    fours_by_team_a number(4),
    sixes_by_team_a number(4),
    total_runs_scored_by_team_a number(4),
    wicket_lost_by_team_a number(4),

    overs_played_by_team_b number(3),
    balls_played_by_team_b number(4),
    extra_balls_played_by_team_b number(4),
    extra_runs_scored_by_team_b number(4),
    fours_by_team_b number(4),
    sixes_by_team_b number(4),
    total_runs_scored_by_team_b number(4),
    wicket_lost_by_team_b number(3),

    toss_winner_team_id int not null, 
    toss_decision text not null, 
    match_result text not null, 
    winner_team_id int not null,

    CONSTRAINT fk_date FOREIGN KEY (date_id) REFERENCES date_dim (date_id),
    CONSTRAINT fk_referee FOREIGN KEY (referee_id) REFERENCES referee_dim (referee_id),
    CONSTRAINT fk_team1 FOREIGN KEY (first_team_id) REFERENCES team_dim (team_id),
    CONSTRAINT fk_team2 FOREIGN KEY (second_team_id) REFERENCES team_dim (team_id),
    CONSTRAINT fk_match_type FOREIGN KEY (match_type_id) REFERENCES match_type_dim (match_type_id),
    CONSTRAINT fk_venue FOREIGN KEY (venue_id) REFERENCES venue_dim (venue_id),

    CONSTRAINT fk_toss_winner_team FOREIGN KEY (toss_winner_team_id) REFERENCES team_dim (team_id),
    CONSTRAINT fk_winner_team FOREIGN KEY (winner_team_id) REFERENCES team_dim (team_id)
);

------------------------------------------------------
--match_type_dim
------------------------------------------------------
insert into CRICKET.CONSUMPTION.MATCH_TYPE_DIM (match_type)
(SELECT distinct match_type from CRICKET.CLEAN.MATCH_DETAIL_CLEAN);

------------------------------------------------------
--team  dim data load
------------------------------------------------------
select distinct team_name from (
select first_team as team_name
from CRICKET.CLEAN.MATCH_DETAIL_CLEAN
UNION ALL 
SELECT second_team as team_name 
from CRICKET.CLEAN.MATCH_DETAIL_CLEAN
);

insert into CRICKET.CONSUMPTION.TEAM_DIM (team_name)
select distinct team_name from (
select first_team as team_name
from CRICKET.CLEAN.MATCH_DETAIL_CLEAN
UNION ALL 
SELECT second_team as team_name 
from CRICKET.CLEAN.MATCH_DETAIL_CLEAN
) order by team_name


SELECT * from CRICKET.CONSUMPTION.TEAM_DIM

------------------------------------------------------
--team player  dim data load
------------------------------------------------------

SELECT * from CRICKET.CLEAN.PLAYER_CLEAN_TBL limit 10;

select country, player_name 
from CRICKET.CLEAN.PLAYER_CLEAN_TBL
group by 1,2;

select a.country, b.team_id, a.player_name 
from CRICKET.CLEAN.PLAYER_CLEAN_TBL a
join CRICKET.CONSUMPTION.TEAM_DIM b
on a.country=b.team_name
group by 1,2,3;

insert into CRICKET.CONSUMPTION.PLAYER_DIM (team_id,player_name)
(select  b.team_id, a.player_name 
from CRICKET.CLEAN.PLAYER_CLEAN_TBL a
join CRICKET.CONSUMPTION.TEAM_DIM b
on a.country=b.team_name
group by 1,2)


select * from CRICKET.CONSUMPTION.PLAYER_DIM

------------------------------------------------------
--Referee  dim data load
------------------------------------------------------

-- since we have not populated the referee details in our previous layer
---will skip for now

SELECT * from cricket.clean.match_detail_clean limit 10;

select info from cricket.raw.match_raw_tbl limit 1;


  
SELECT 
    info:officials.match_referees[0]::text as match_referees,
    info:officials.reserve_umpires[0]::text as reserve_umpires,
    info:officials.tv_umpires[0]::text as tv_umpires,
    info:officials.umpires[0]::text as first_umpire,
    info:officials.umpires[1]::text as second_umpire
FROM cricket.raw.match_raw_tbl m
--added refree column data extraction to CRICKET.CLEAN.MATCH_DETAIL_CLEAN table

select * from CRICKET.CONSUMPTION.REFEREE_DIM;


------------------------------------------------------
--Venue  dim data load
------------------------------------------------------

select * from cricket.clean.match_detail_clean limit 10;

select venue,city
from cricket.clean.match_detail_clean 
group by 1,2;


select * from CRICKET.CONSUMPTION.VENUE_DIM;


insert into CRICKET.CONSUMPTION.VENUE_DIM (VENUE_NAME,CITY)
(select venue,
        case 
            when city is null 
            then 'NA'
            else city
        END as city
from cricket.clean.match_detail_clean 
group by 1,2 )

------------------------------------------------------
--Date  dim data load
------------------------------------------------------
select min(event_date),max(event_date) from cricket.clean.match_detail_clean;


CREATE OR REPLACE transient table cricket.consumption.date_range_reference (DATE DATE);


-- Define your start and end dates
SET start_date = '2023-10-12';
SET end_date = '2023-11-10';

-- Create a CTE to generate dates within the specified range
WITH RECURSIVE date_range AS (
  SELECT TO_DATE($start_date) AS generated_date
  UNION ALL
  SELECT DATEADD(day, 1, generated_date)
  FROM date_range
  WHERE generated_date < TO_DATE($end_date)
)

Select * from date_range;

insert into cricket.consumption.date_range_reference (date) values 
('2023-10-12'),('2023-10-13'),('2023-10-14'),('2023-10-15'),('2023-10-16'),('2023-10-17'),('2023-10-18'),
('2023-10-19'),('2023-10-20'),('2023-10-21'),('2023-10-22'),('2023-10-23'),('2023-10-24'),('2023-10-25'),
('2023-10-26'),('2023-10-27'),('2023-10-28'),('2023-10-29'),('2023-10-30'),('2023-10-31'),('2023-11-01'),
('2023-11-02'),('2023-11-03'),('2023-11-04'),('2023-11-05'),('2023-11-06'),('2023-11-07'),('2023-11-08'),
('2023-11-09'),('2023-11-10'),('2023-10-12'),('2023-10-13'),('2023-10-14'),('2023-10-15'),('2023-10-16'),
('2023-10-17'),('2023-10-18'),('2023-10-19'),('2023-10-20'),('2023-10-21'),('2023-10-22'),('2023-10-23'),
('2023-10-24'),('2023-10-25'),('2023-10-26'),('2023-10-27'),('2023-10-28'),('2023-10-29'),('2023-10-30'),
('2023-10-31'),('2023-11-01'),('2023-11-02'),('2023-11-03'),('2023-11-04'),('2023-11-05'),('2023-11-06'),
('2023-11-07'),('2023-11-08'),('2023-11-09'),('2023-11-10')


select * from cricket.consumption.date_range_reference;



INSERT INTO cricket.consumption.date_dim (Date_ID, Full_Dt, Day, Month, Year, Quarter, DayOfWeek, DayOfMonth, DayOfYear, DayOfWeekName, IsWeekend)
SELECT
    ROW_NUMBER() OVER (ORDER BY Date) AS DateID,
    Date AS FullDate,
    EXTRACT(DAY FROM Date) AS Day,
    EXTRACT(MONTH FROM Date) AS Month,
    EXTRACT(YEAR FROM Date) AS Year,
    CASE WHEN EXTRACT(QUARTER FROM Date) IN (1, 2, 3, 4) THEN EXTRACT(QUARTER FROM Date) END AS Quarter,
    DAYOFWEEKISO(Date) AS DayOfWeek,
    EXTRACT(DAY FROM Date) AS DayOfMonth,
    DAYOFYEAR(Date) AS DayOfYear,
    DAYNAME(Date) AS DayOfWeekName,
    CASE When DAYNAME(Date) IN ('Sat', 'Sun') THEN 1 ELSE 0 END AS IsWeekend
FROM cricket.consumption.date_range_reference;


select * from cricket.consumption.date_dim;

------------------------------------------------------
--Fact Table Data Population Script
------------------------------------------------------



insert into cricket.consumption.match_fact 

select 
    m.match_type_number as match_id,
    dd.date_id as date_id,
    0 as referee_id,
    ftd.team_id as first_team_id,
    std.team_id as second_team_id,
    mtd.match_type_id as match_type_id,
    vd.venue_id as venue_id,
    50 as total_overs,
    6 as balls_per_overs,
    max(case when d.team_name = m.first_team then  d.over else 0 end ) as OVERS_PLAYED_BY_TEAM_A,
    sum(case when d.team_name = m.first_team then  1 else 0 end ) as balls_PLAYED_BY_TEAM_A,
    round(sum(case when d.team_name = m.first_team then  d.extras else 0 end )) as extra_balls_PLAYED_BY_TEAM_A,
    sum(case when d.team_name = m.first_team then  d.extra_runs else 0 end ) as extra_runs_scored_BY_TEAM_A,
    0 fours_by_team_a,
    0 sixes_by_team_a,
    round((sum(case 
            when d.team_name = m.first_team 
            then  d.runs else 0 end ) + 
            sum(case 
                    when d.team_name = m.first_team 
                    then  d.extra_runs else 0 end ) 
                    )) as total_runs_scored_BY_TEAM_A,
    sum(case 
            when d.team_name = m.first_team and d.player_out is not null 
            then  1 else 0 end 
            ) as wicket_lost_by_team_a,    
    
    max(case when d.team_name = m.second_team then  d.over else 0 end ) as OVERS_PLAYED_BY_TEAM_B,
    sum(case when d.team_name = m.second_team then  1 else 0 end ) as balls_PLAYED_BY_TEAM_B,
    round(sum(case when d.team_name = m.second_team then  d.extras else 0 end )) as extra_balls_PLAYED_BY_TEAM_B,
    sum(case when d.team_name = m.second_team then  d.extra_runs else 0 end ) as extra_runs_scored_BY_TEAM_B,
    0 fours_by_team_b,
    0 sixes_by_team_b,
    (round(sum(case when d.team_name = m.second_team then  d.runs else 0 end ) + sum(case when d.team_name = m.second_team then  d.extra_runs else 0 end )) ) as total_runs_scored_by_team_b,
    sum(case when d.team_name = m.second_team and d.player_out is not null then  1 else 0 end ) as wicket_lost_by_team_b,
    tw.team_id as toss_winner_team_id,
    m.toss_decision as toss_decision,
    m.MATCH_RESULT as match_result,
    mw.team_id as winner_team_id

from 
    cricket.clean.match_detail_clean m
    join cricket.consumption.date_dim dd on m.event_date = dd.full_dt
    join cricket.consumption.team_dim ftd on m.first_team = ftd.team_name 
    join cricket.consumption.team_dim std on m.second_team = std.team_name 
    join cricket.consumption.match_type_dim mtd on m.match_type = mtd.match_type
    join cricket.consumption.venue_dim vd on m.city = vd.city
    join cricket.clean.delivery_clean_tbl d  on d.match_type_number = m.match_type_number 
    join cricket.consumption.team_dim tw on m.toss_winner = tw.team_name 
    join cricket.consumption.team_dim mw on m.winner= mw.team_name 
    group by
        m.match_type_number,
        date_id,
        referee_id,
        first_team_id,
        second_team_id,
        match_type_id,
        venue_id,
        total_overs,
        toss_winner_team_id,
        toss_decision,
        match_result,
        winner_team_id
       ;

SELECT * FROM cricket.consumption.match_fact 


------------------------------------------------------
--Delivery Fact Table
------------------------------------------------------

CREATE or replace TABLE cricket.consumption.delivery_fact (
    match_id INT ,
    team_id INT,
    bowler_id INT,
    batter_id INT,
    non_striker_id INT,
    over INT,
    runs INT,
    extra_runs INT,
    extra_type VARCHAR(255),
    player_out VARCHAR(255),
    player_out_kind VARCHAR(255),

    CONSTRAINT fk_del_match_id FOREIGN KEY (match_id) REFERENCES match_fact (match_id),
    CONSTRAINT fk_del_team FOREIGN KEY (team_id) REFERENCES team_dim (team_id),
    CONSTRAINT fk_bowler FOREIGN KEY (bowler_id) REFERENCES player_dim (player_id),
    CONSTRAINT fk_batter FOREIGN KEY (batter_id) REFERENCES player_dim (player_id),
    CONSTRAINT fk_stricker FOREIGN KEY (non_striker_id) REFERENCES player_dim (player_id)
);


select 
    d.match_type_number as match_id,
    td.team_id,
    bpd.player_id as bower_id, 
    bpd.player_name,
    spd.player_id batter_id, 
    spd.player_name,
    nspd.player_id as non_stricker_id,
    nspd.player_name,
    d.over,
    d.runs,
    case when d.extra_runs is null then 0 else d.extra_runs end as extra_runs,
    case when d.extra_type is null then 'None' else d.extra_type end as extra_type,
    case when d.player_out is null then 'None' else d.player_out end as player_out,
    case when d.kind_of_out is null then 'None' else d.kind_of_out end as player_out_kind
from 
    cricket.clean.delivery_clean_tbl d
    join team_dim td on d.team_name = td.team_name
    join player_dim bpd on d.bowler = bpd.player_name
    join player_dim spd on d.batter = spd.player_name
    join player_dim nspd on d.non_striker = nspd.player_name;
	
	
	
-- insert record
insert into cricket.consumption.delivery_fact
select 
    d.match_type_number as match_id,
    td.team_id,
    bpd.player_id as bower_id, 
    spd.player_id batter_id, 
    nspd.player_id as non_stricker_id,
    d.over,
    d.runs,
    case when d.extra_runs is null then 0 else d.extra_runs end as extra_runs,
    case when d.extra_type is null then 'None' else d.extra_type end as extra_type,
    case when d.player_out is null then 'None' else d.player_out end as player_out,
    case when d.kind_of_out is null then 'None' else d.kind_of_out end as player_out_kind
from 
    cricket.clean.delivery_clean_tbl d
    join team_dim td on d.team_name = td.team_name
    join player_dim bpd on d.bowler = bpd.player_name
    join player_dim spd on d.batter = spd.player_name
    join player_dim nspd on d.non_striker = nspd.player_name;

    SELECT * FROM cricket.consumption.delivery_fact